Day 9 Assignments:
<Create relevant tables or alter the table or insert records as per below assignments, verify where all the assignments are VALID means no red mark in the Schema Explorer for all current and previous Procedures/functions/View assignments>


Use the SQL/PLSQL Best Practices, Naming Convention, etc., without fail during all the assignments.

1.    Write a PL/SQL ‘EMP_DEPT_CURSOR_PROC’ procedure that declares and uses two cursors—one without a parameter and one with a parameter. 
The first cursor retrieves the department number and the department name from the departments table for all departments whose ID number is less than 100. 
The second cursor receives the department number as a parameter, and retrieves employee details for those who work in that department and whose employee_id is less than 120.
a.    Declare a cursor c_dept_cursor to retrieve department_id and department_name for those departments with department_id less than 100. Order by department_id.
b.    Declare another cursor c_emp_cursor that takes the department number as parameter and retrieves the following data from the employees table: last_name, job_id, hire_date, and salary of those employees who work in that department,with employee_id less than 120.
c.    Declare variables to hold the values retrieved from each cursor. Use the %TYPE attribute while declaring variables.
d.    Open c_dept_cursor and use a simple loop to fetch values into the variables declared. Display the department number and department name. Use the appropriate cursor attribute to exit the loop.
e.    Open c_emp_cursor by passing the current department number as a parameter.Start another loop and fetch the values of emp_cursor into variables, and print all the details retrieved from the employees table.
Note
•    Check whether c_emp_cursor is already open before opening the cursor.
•    Use the appropriate cursor attribute for the exit condition.
•    When the loop completes, print a line after you have displayed the details of each department, and close c_emp_cursor.
•    End the first loop and close c_dept_cursor. Then end the executable section.


SOLUTION:


SET SERVEROUTPUT ON;


CREATE OR REPLACE PROCEDURE EMP_DEPT_CURSOR_PROC AS
CURSOR c_dept_cursor IS SELECT department_id,department_name FROM departments 
WHERE department_id < 100
ORDER BY department_id;

CURSOR c_emp_cursor(v_dept_no NUMBER) IS SELECT last_name,job_id,hire_date,salary FROM employees
WHERE department_id = v_dept_no AND employee_id <120;

deptno departments.department_id%TYPE;
deptname departments.department_name%TYPE;
lname employees.last_name%TYPE;
jobid employees.job_id%TYPE;
hiredate employees.hire_date%TYPE;
sal employees.salary%TYPE;

BEGIN
OPEN c_dept_cursor;
LOOP
FETCH c_dept_cursor INTO deptno,deptname;
EXIT WHEN c_dept_cursor%NOTFOUND; 
DBMS_OUTPUT.PUT_LINE('DEPARTMENT NUMBER: '|| deptno||' DEPARTMENT NAME: '||deptname);
IF c_emp_cursor%ISOPEN THEN
CLOSE c_emp_cursor;
END IF;
OPEN c_emp_cursor(deptno);
LOOP
FETCH c_emp_cursor INTO lname,jobid,hiredate,sal;
EXIT WHEN c_emp_cursor%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(lname||'  '||jobid||'  '||hiredate||'  '||sal);
END LOOP;
DBMS_OUTPUT.PUT_LINE('..........................................');
CLOSE c_emp_cursor;
END LOOP;
CLOSE c_dept_cursor;
END;
/


EXEC EMP_DEPT_CURSOR_PROC;

 
